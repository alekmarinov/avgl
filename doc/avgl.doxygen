/*! \mainpage AVGL Documentation
	\section overview AVGL overview
	
	\subsection abstract Abstract
	
	AVGL (the short name of AVIQ Graphics Library) is a library for simplifying GUI, Multimedia and 2D programming,
	designed for high portability and flexibility. The library is based on pure ANSI C (ISO C90) language using object oriented technics.
	
	This manual documents the AVGL C API. 
	
	\subsection rules Coding rules
	A class in AVGL is represented by a C structure (\b struct) followed by the class name. Tipical AVGL class definition is given bellow:
	\code
	typedef struct av_foo
	{
		...
	} av_foo_t, *av_foo_p;
	\endcode

	A class name is always prefixed by the library namespace \b av followed by an underscore (\b _). If the class is a part of a package then the package name should precede the class name separated by an underscore. The same rule is valid for the package name.
	In the example above 3 identifiers are defined with the definintion of a single class named \c foo:

	\li \c av_foo is the name of the class
	\li \c av_foo_t is the class type used as synonym (or shortcut) to \b struct \c av_foo. 
	\li \c av_foo_p is a pointer type to \c foo
	
	The code refering the class should use only \c av_foo_t for refering the class structure or \c av_foo_p for refering a pointer to the class structure.
	The only exception to this rule is when defining a member function to the class and declaring the \c self argument.
	\code 
	typedef struct av_foo
	{
		void (*do_foolish)(struct av_foo* self) 
	... \endcode
	
	\subsection terms Terms definition
		\b TORB(A)
			is an abreviation from Trivial Object-Request-Broker (Architecture)
	
		\b Class
			is a regular C structure

		\b Service
			is a singleton class normally accessed via TORB

		\b Extension
			is a module adding new interfaces to the library
	
		\b Plugin
			is a module adding specifc implementations of existing AVGL interfaces
*/
